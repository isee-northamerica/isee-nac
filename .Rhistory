y <- 20 + 0.03*x + 0.05*z^2 + 0.0001*x*z^2 + rnorm(1000, 0, 5)
plot(x, y)
plot(z, y)
y <- 20 + 0.03*x + 0.01*z^2 + 0.0001*x*z^2 + rnorm(1000, 0, 5)
plot(x, y)
plot(z, y)
y <- 20 + 0.03*x + 0.01*z^2 + 0.0001*x*z^2 + rnorm(1000, 0, 7)
plot(x, y)
plot(z, y)
mod1 <- lm(y ~ x + z)
library(mgcv)
mod1 <- gam(y ~ ti(x) + ti(z) + ti(x,z))
summary(mod1)
plot(mod1)
plot(mod1, pages = 1, pers = "sp")
?plot.gam
plot(mod1, pages = 1, pers = TRUE)
plot(mod1, select = 3, pers = TRUE)
vcov(mod1)
mod1$Ve
dim(vcov(mod1))
dim(mod1$Ve)
vcov(mod1) == mod1$Ve
vcov(mod1)[1:2, 1:2]
mod1$Ve[1:2, 1:2]
sqrt(mod1$Ve[1:2, 1:2])
mod1$Vp[1:2, 1:2]
vcov1 <- vcov(mod1)
mod2 <- gam(y ~ x*Z)
mod2 <- gam(y ~ x*z)
summary(mod2)
vcov(mod2)
summary(mod2)$coefficients[2,1]
summary(mod2)$coef[2,1]
names(mod2)
mod2$coefficients[2,1]
mod2$coefficients[2]
mod2$coefficients[4]
coeff <- rep(NA, length(1:100))
vars  <- rep(NA, length(1:100))
vcov(mod2)
coeffs <- rep(NA, length(1:100))
sterrs <- rep(NA, length(1:100))
for (z in 1:100){
coeffs[z] <- mod2$coefficients[2] + z*mod2$coefficients[4]
sterrs[z] <- sqrt(vcov(mod2)[2,2] + z^2*vcov(mod2)[4,4] + 2*z*vcov(mod2)[2,4])
}
coeffs
coeffs <- rep(NA, length(0:100))
sterrs <- rep(NA, length(0:100))
for (z in 0:100){
coeffs[z] <- mod2$coefficients[2] + z*mod2$coefficients[4]
sterrs[z] <- sqrt(vcov(mod2)[2,2] + z^2*vcov(mod2)[4,4] + 2*z*vcov(mod2)[2,4])
}
coeffs
for (z in 0:100){
coeffs[(z+1)] <- mod2$coefficients[2] + z*mod2$coefficients[4]
sterrs[(z+1)] <- sqrt(vcov(mod2)[2,2] + z^2*vcov(mod2)[4,4] + 2*z*vcov(mod2)[2,4])
}
coeffs
sterrs
mod1$coefficients
plot(mod1, select = 1, pers = TRUE)
mod1$coefficients
mod1$coefficients*[1:100]
mod1$coefficients*1:100
plot(mod1$coefficients*1:100)
ns(x)
library(splines)
ns(x, df = 4)
dim(ns(x, df = 4))
plot(ns(x, df = 4))
plot(x)
plot(x, ns(x, df = 4))
dim(ns(x, df = 4))
summary(lm(y~ns(x,df=4)))
mod3 <- lm(y~ns(x,df=4))
summary(x)
mod3$coefficients
mod3$coefficients[2:5]
mod3$coefficients[2:5]*seq(0.45, 1.09, 0.01)
seq(0.45, 1.09, 0.01)
t(mod3$coefficients[2:5])*seq(0.45, 1.09, 0.01)
t(mod3$coefficients[2:5])%*%seq(0.45, 1.09, 0.01)
mod3 <- gam(y~s(x,fx=TRUE,k=3))
summary(x)
summary(mod3)
mod3 <- gam(y~s(x,fx=TRUE,k=5))
summary(mod3)
plot(mod3)
mod3 <- gam(y~ti(x))
plot(mod3)
mod3$coefficients
mod3$coefficients[2:5]*seq(0.45, 1.09, 0.01)
mod3$coefficients[2:5]*as.matrix(seq(0.45, 1.09, 0.01))
?vis.gam
vis.gam
library(dlnm)
install.packages(dlnm)
install.packages("dlnm")
library(dlnm)
crossbasis
mod3 <- gam(y~ti(x))
summary(x)
ti(x)
dim(ti(x))
ti.x <- ti(x)
?model.matrix
model.matrix(mod1)
dim(model.matrix(mod1))
rm(list=ls())
set.seed(212)
x <- rnorm(1000, 0.8, 0.1)
z <- rnorm(1000, 22, 20)
y <- 20 + 0.03*x + 0.01*z^2 + 0.0001*x*z^2 + rnorm(1000, 0, 7)
plot(x, y)
plot(z, y)
library(mgcv)
mod1 <- gam(y ~ ti(x) + ti(z) + ti(x,z))
summary(mod1)
y <- 20 + 0.03*x + 0.01*z^2 + 0.001*x*z^2 + rnorm(1000, 0, 7)
plot(x, y)
plot(z, y)
library(mgcv)
mod1 <- gam(y ~ ti(x) + ti(z) + ti(x,z))
summary(mod1)
y <- 20 + 0.03*x + 0.01*z^2 + 0.001*x*(z^2) + rnorm(1000, 0, 7)
y <- 20 + 0.03*x + 0.01*z^2 + 0.01*x*(z^2) + rnorm(1000, 0, 7)
plot(x, y)
plot(z, y)
mod1 <- gam(y ~ ti(x) + ti(z) + ti(x,z))
summary(mod1)
plot(mod1, select = 1, pers = TRUE)
plot(mod1, select = 1, pers = TRUE, scale = TRUE)
?plot.gam
plot(mod1, select = 1, pers = TRUE, scale = 0)
plot(mod1, select = 2, pers = TRUE, scale = 0)
plot(mod1, select = 3, pers = TRUE, scale = 0)
vcov1 <- vcov(mod1)
mod3 <- gam(y ~ te(x,z))
summary(mod1)
summary(mod3)
plot(mod1, select = 1, pers = TRUE, scale = 0)
plot(mod3, select = 1, pers = TRUE, scale = 0)
plot(mod1, select = 3, pers = TRUE, scale = 0)
plot(mod3, select = 1, pers = TRUE, scale = 0)
aa <- plot(mod3, select = 1, pers = TRUE, scale = 0)
View(aa)
aa[[1]]
aa[[1]][['y']]
aa[[1]][['z']]
aa[[1]][['x']]
summary(z)
aa <- plot(mod3)
mod3$coefficients
names(mod3)
vcov(mod3)
dim(vcov(mod3)
)
vis.gam()
vis.gam
mod3$var.summary
mod3$var.summary[[view[1]]]
n.grid <- 30
v.names <- names(x$var.summary)
v.names <- names(mod3$var.summary)
v.names
fac.seq <- function(fac, n.grid) {
fn <- length(levels(fac))
gn <- n.grid
if (fn > gn)
mf <- factor(levels(fac))[1:gn]
else {
ln <- floor(gn/fn)
mf <- rep(levels(fac)[fn], gn)
mf[1:(ln * fn)] <- rep(levels(fac), rep(ln, fn))
mf <- factor(mf, levels = levels(fac))
}
mf
}
m1 <- fac.seq(mod3$var.summary[[v.names[1]]], n.grid)
mod3$var.summary[[v.names[1]]]
n.grid
fac = mod3$summary
fn <- length(levels(fac))
fn
levels(fac)
gn <- n.grid
gn
fac = mod3$summary[[v.names[1]]]
fn <- length(levels(fac))
fn
levels(fac)
fac
mod3$summary[[v.names[1]]]
v.names
v.names[1]
fac = mod3$var.summary[[v.names[1]]]
fac
fn <- length(levels(fac))
fn
levels(fac)
fac = mod3$var.summary
fn <- length(levels(fac))
fn
gn <- n.grid
mf <- factor(levels(fac))[1:gn]
factor(levels(fac))[1:gn]
range(mod3$var.summary[[view[1]]])
mod3$var.summary[[[1]]]
mod3$var.summary[[1]]
range(mod3$var.summary[[1]]
)
m1 <- seq(range(mod3$var.summary[[1]])[1], range(mod3$var.summary[[1]])[2], length = n.grid)
m1
m2 <- seq(range(mod3$var.summary[[1]])[2], range(mod3$var.summary[[2]])[2], length = n.grid)
m1
m2
range(mod3$var.summary[[1]])
m2 <- seq(range(mod3$var.summary[[2]])[1], range(mod3$var.summary[[2]])[2], length = n.grid)
m2
v1 <- rep(m1, n.grid)
v1
v2 <- rep(m2, rep(n.grid, n.grid))
dim(v2)
length(v2)
newd <- data.frame(matrix(0, n.grid * n.grid, 0))
mod3$var.summary[[i]]
mod3$var.summary[[1]]
ma[[1]]   <- mod3$var.summary[[1]]
dim(newd)
newd[[1]] <- matrix(mod3$var.summary[[1]], n.grid * n.grid, ncol(x$var.summary[[i]]),
byrow = TRUE)
newd[[1]] <- matrix(mod3$var.summary[[1]], n.grid * n.grid, ncol(mod3$var.summary[[1]]),
byrow = TRUE)
ncol(mod3$var.summary[[1]]
)
newd[[1]] <- rep(mod3$var.summary[[1]], n.grid * n.grid)
mod3$var.summary[[1]]
n.grid * n.grid
cond[[v.names[1]]]
mod3$var.summary[[1]]
mod3$var.summary[[1]][2]
newd[[1]] <- rep(mod3$var.summary[[1]][2], n.grid * n.grid)
newd[[2]] <- rep(mod3$var.summary[[2]][2], n.grid * n.grid)
view(newd)
View(newd)
summary(x)
summary(z)
mod3$var.summary[[2]][2]
fv <- predict.gam(x, newdata = newd, se.fit = TRUE, type = type)
fv <- predict.gam(mod3, newdata = newd, se.fit = TRUE, type = type)
fv <- predict.gam(mod3, newdata = newd, se.fit = TRUE, type = "terms")
View(fv)
library(dlnm)
plot.dlnm
library(dlnm)
plot.crosspred(mod3)
newdat1 <- data.frame(y,x,z)
head(newdat1)
quantile(z, 0.25)
newdat1$z <- quantile(z, 0.25)
pred25 <- predict(mod3, newdata = newdat1, type = "terms")
pred25
dim(pred25)
pred25 <- predict(mod3, newdata = newdat1, type = "terms", se.fit = TRUE)
dim(pred25)
pred25 <- pred25[order(pred25$x),]
pred25 <- pred25[sort(pred25$x),]
pred25$x
head(pred25$fit)
pred25 <- merge(newdat1, pred25$fit, by = 'row.name')
pred25 <- merge(newdat1, pred25$fit, by = 'Row.name')
pred25 <- merge(newdat1, pred25$fit, by = 'Row.names')
pred25 <- merge(newdat1, pred25$fit, by = 'row.names')
head(pred25)
pred25 <- merge(newdat1, pred25$se.fit, by = 'row.names')
pred25 <- merge(newdat1, pred25$fit, by = 'row.names')
pred25 <- predict(mod3, newdata = newdat1, type = "terms", se.fit = TRUE)
dim(pred25)
pred25 <- merge(newdat1, pred25$fit, by = 'row.names')
pred25 <- merge(pred25, pred25$se.fit, by = 'row.names')
head(pred25)
pred25 <- predict(mod3, newdata = newdat1, type = "terms", se.fit = TRUE)
pred25.fits <- data.frame(pred25$fit, pred25$se.fit)
head(pred25.fits)
names(pred25.fits) <- c("fit", "sefit")
newdat1 <- merge(newdat1, pred25.fits$fit, by = 'row.names')
head(newdat1)
newdat1   <- data.frame(y,x,z)
newdat1$z <- quantile(z, 0.25)
pred25 <- predict(mod3, newdata = newdat1, type = "terms", se.fit = TRUE)
dim(pred25)
pred25.fits <- data.frame(pred25$fit, pred25$se.fit)
names(pred25.fits) <- c("fit", "sefit")
newdat1 <- merge(newdat1, pred25.fits$fit, by = 'row.names')
head(newdat1)
head(pred25.fits)
newdat1   <- data.frame(y,x,z)
newdat1$z <- quantile(z, 0.25)
pred25 <- predict(mod3, newdata = newdat1, type = "terms", se.fit = TRUE)
dim(pred25)
pred25.fits <- data.frame(pred25$fit, pred25$se.fit)
names(pred25.fits) <- c("fit", "sefit")
newdat1 <- merge(newdat1, pred25.fits, by = 'row.names')
head(newdat1)
newdat1 <- newdat1[sort(newdat1$x),]
newdat1   <- data.frame(y,x,z)
newdat1$z <- quantile(z, 0.25)
pred25 <- predict(mod3, newdata = newdat1, type = "terms", se.fit = TRUE)
dim(pred25)
pred25.fits <- data.frame(pred25$fit, pred25$se.fit)
names(pred25.fits) <- c("fit", "sefit")
newdat1 <- merge(newdat1, pred25.fits, by = 'row.names')
head(newdat1)
newdat1 <- newdat1[sort(newdat1$x),]
head(newdat1)
newdat1 <- merge(newdat1, pred25.fits, by = 'row.names')
newdat1   <- data.frame(y,x,z)
newdat1$z <- quantile(z, 0.25)
pred25 <- predict(mod3, newdata = newdat1, type = "terms", se.fit = TRUE)
dim(pred25)
pred25.fits <- data.frame(pred25$fit, pred25$se.fit)
names(pred25.fits) <- c("fit", "sefit")
newdat1 <- merge(newdat1, pred25.fits, by = 'row.names')
head(newdat1)
dim(newdat1)
newdat1 <- newdat1[order(newdat1$x),]
dim(newdat1)
head(newdat1)
newdat1$lci <- newdat1$fit - 1.96*newdat1$sefit
newdat1$uci <- newdat1$fit + 1.96*newdat1$sefit
newdat1$lci <- newdat1$fit - 1.96*newdat1$sefit
newdat1$uci <- newdat1$fit + 1.96*newdat1$sefit
plot(range(newdat1$x))
plot(range(newdat1$x), c(min(newdat1$lci), max(newdat1$uci)))
plot(range(newdat1$x), c(min(newdat1$lci), max(newdat1$uci)), pch = '')
plot(range(newdat1$x), c(min(newdat1$lci), max(newdat1$uci)), pch = '', ylab = "y", xlab = "x")
plot(range(newdat1$x), c(min(newdat1$lci), max(newdat1$uci)),
pch = '', ylab = "y", xlab = "x", las = 1)
lines(newdat1$x, newdat1$fit)
summary(y)
lines(newdat1$x, newdat1$fit)
lines(newdat1$x, newdat1$lci, lty =2)
lines(newdat1$x, newdat1$uci, lty =2)
quantile(z, 0.75)
newdat2   <- data.frame(y,x,z)
newdat2$z <- quantile(z, 0.75)
pred75 <- predict(mod3, newdata = newdat2, type = "terms", se.fit = TRUE)
dim(pred75)
pred75.fits <- data.frame(pred75$fit, pred75$se.fit)
names(pred75.fits) <- c("fit", "sefit")
newdat2            <- merge(newdat2, pred75.fits, by = 'row.names')
head(newdat2)
newdat2 <- newdat2[order(newdat2$x),]
newdat2$lci <- newdat2$fit - 1.96*newdat2$sefit
newdat2$uci <- newdat2$fit + 1.96*newdat2$sefit
plot(range(newdat2$x), c(min(newdat2$lci), max(newdat2$uci)),
pch = '', ylab = "y", xlab = "x", las = 1)
lines(newdat2$x, newdat2$fit)
lines(newdat2$x, newdat2$lci, lty =2)
lines(newdat2$x, newdat2$uci, lty =2)
plot(mod3, select = 1, pers = TRUE, scale = 0)
c <- rnorm(1000, 0, 12)
y <- 20 + 0.03*x + 0.01*z^2 + 0.01*x*(z^3) + 2*c + rnorm(1000, 0, 7)
plot(x, y)
plot(z, y)
y <- 20 + 0.03*x + 0.01*z^2 + 0.01*x*(z^3) + 2*c + rnorm(1000, 0, 12)
plot(x, y)
plot(z, y)
mod1 <- gam(y ~ ti(x) + ti(z) + ti(x,z))
summary(mod1)
mod3 <- gam(y ~ te(x,z) + c)
summary(mod3)
plot(mod3, select = 1, pers = TRUE, scale = 0)
y <- 20 + 0.03*x + 0.01*z^2 + 0.01*(x^2)*(z^3) + 2*c + rnorm(1000, 0, 12)
plot(x, y)
plot(z, y)
mod3 <- gam(y ~ te(x,z) + c)
summary(mod3)
plot(mod3, select = 1, pers = TRUE, scale = 0)
newdat1   <- data.frame(y,x,z)
newdat1$z <- quantile(z, 0.25)
pred25 <- predict(mod3, newdata = newdat1, type = "terms", se.fit = TRUE)
dim(pred25)
pred25.fits <- data.frame(pred25$fit, pred25$se.fit)
names(pred25.fits) <- c("fit", "sefit")
newdat1 <- merge(newdat1, pred25.fits, by = 'row.names')
head(newdat1)
newdat1 <- newdat1[order(newdat1$x),]
newdat1$lci <- newdat1$fit - 1.96*newdat1$sefit
newdat1$uci <- newdat1$fit + 1.96*newdat1$sefit
plot(range(newdat1$x), c(min(newdat1$lci), max(newdat1$uci)),
pch = '', ylab = "y", xlab = "x", las = 1)
lines(newdat1$x, newdat1$fit)
lines(newdat1$x, newdat1$lci, lty =2)
lines(newdat1$x, newdat1$uci, lty =2)
pred25 <- predict(mod3, newdata = newdat1, type = "terms", se.fit = TRUE)
newdat1   <- data.frame(y,x,z,c)
newdat1$z <- quantile(z, 0.25)
pred25 <- predict(mod3, newdata = newdat1, type = "terms", se.fit = TRUE)
dim(pred25)
head(pred25$fit)
head(pred25$fit[2])
head(pred25$fit[[2]])
head(pred25$fit[["te(x,z)"]])
head(pred25$fit["te(x,z)"])
head(pred25$fit[,"te(x,z)"])
pred25.fits <- data.frame(pred25$fit[,"te(x,z)"], pred25$se.fit[,"te(x,z)"])
names(pred25.fits) <- c("fit", "sefit")
newdat1 <- merge(newdat1, pred25.fits, by = 'row.names')
head(newdat1)
newdat1 <- newdat1[order(newdat1$x),]
newdat1$lci <- newdat1$fit - 1.96*newdat1$sefit
newdat1$uci <- newdat1$fit + 1.96*newdat1$sefit
plot(range(newdat1$x), c(min(newdat1$lci), max(newdat1$uci)),
pch = '', ylab = "y", xlab = "x", las = 1)
lines(newdat1$x, newdat1$fit)
lines(newdat1$x, newdat1$lci, lty =2)
lines(newdat1$x, newdat1$uci, lty =2)
newdat2   <- data.frame(y,x,z,c)
newdat2$z <- quantile(z, 0.75)
pred75 <- predict(mod3, newdata = newdat2, type = "terms", se.fit = TRUE)
pred75.fits        <- data.frame(pred75$fit[,"te(x,z)"], pred75$se.fit[,"te(x,z)"])
names(pred75.fits) <- c("fit", "sefit")
newdat2            <- merge(newdat2, pred75.fits, by = 'row.names')
head(newdat2)
newdat2 <- newdat2[order(newdat2$x),]
newdat2$lci <- newdat2$fit - 1.96*newdat2$sefit
newdat2$uci <- newdat2$fit + 1.96*newdat2$sefit
plot(range(newdat2$x), c(min(newdat2$lci), max(newdat2$uci)),
pch = '', ylab = "y", xlab = "x", las = 1)
lines(newdat2$x, newdat2$fit)
lines(newdat2$x, newdat2$lci, lty =2)
lines(newdat2$x, newdat2$uci, lty =2)
totmin <- min(c(newdat1$lci, newdat2$lci))
totmin <- min(c(newdat1$lci, newdat2$lci))
totmax <- max(c(newdat1$uci, newdat2$uci))
totmin
totmax
plot(range(newdat2$x), c(totmin, totmax),
pch = '', ylab = "y", xlab = "x", las = 1)
lines(newdat2$x, newdat2$fit)
lines(newdat2$x, newdat2$lci, lty =2)
lines(newdat2$x, newdat2$uci, lty =2)
lines(newdat1$x, newdat1$fit, col= "blue")
lines(newdat1$x, newdat1$lci, lty=2, col= "blue")
lines(newdat1$x, newdat1$uci, lty=2, col= "blue")
summary(y)
legend("topleft", bty=n)
legend("topleft", bty=n, c("Temp, 75th percentile", "Temp, 75th percentile"))
n
legend("topleft", bty="n", c("Temp, 75th percentile", "Temp, 75th percentile"))
legend("topleft", bty="n", c("Temp, 75th percentile", "Temp, 75th percentile"),
lty=c(1,1), col = c("black", "blue"))
# i don't know how to do this in ggplot... sorry!
# first an emptly plot with the correct dimensions
plot(range(newdat2$x), c(totmin, totmax),
pch = '', ylab = "y", xlab = "x", las = 1)
# add curve & confidence bands for the 75th percentile of z (="temp")
lines(newdat2$x, newdat2$fit)
lines(newdat2$x, newdat2$lci, lty=2)
lines(newdat2$x, newdat2$uci, lty=2)
# add curve & confidence bands for the 25th percentile of z (="temp")
lines(newdat1$x, newdat1$fit, col= "blue")
lines(newdat1$x, newdat1$lci, lty=2, col= "blue")
lines(newdat1$x, newdat1$uci, lty=2, col= "blue")
legend("topleft", bty="n", c("Temp, 75th percentile", "Temp, 75th percentile"),
lty=c(1,1), col = c("black", "blue"))
# i don't know how to do this in ggplot... sorry!
# first an emptly plot with the correct dimensions
plot(range(newdat2$x), c(totmin, totmax),
pch = '', ylab = "y", xlab = "x", las = 1)
# add curve & confidence bands for the 75th percentile of z (="temp")
lines(newdat2$x, newdat2$fit)
lines(newdat2$x, newdat2$lci, lty=2)
lines(newdat2$x, newdat2$uci, lty=2)
# add curve & confidence bands for the 25th percentile of z (="temp")
lines(newdat1$x, newdat1$fit, col= "blue")
lines(newdat1$x, newdat1$lci, lty=2, col= "blue")
lines(newdat1$x, newdat1$uci, lty=2, col= "blue")
legend("topleft", bty="n", c("Temp, 75th percentile", "Temp, 25th percentile"),
lty=c(1,1), col = c("black", "blue"))
plot(mod3, select = 1, pers = TRUE, scale = 0)
x <- rnorm(100, 10, 3)
y <- 0.3 + 0.1*x + rnorm(100, 0, 2)
summary(lm(y~x))
summary(lm(y ~ -1+x))
library(mgcv)
x <- rnorm(1000, 0, 2)
z <- rnorm(1000, 0, 10)
w <- te(x,z)
View(te)
View(w)
summary(w)
w$margin
w$margin$x
y <- x*z
y <- x*z + rnrom(1000, 0, 1)
y <- x*z + rnorm(1000, 0, 1)
summary(lm(y~w))
summary(lm(y~w$margin))
install.packages('vembedr')
library(usethis)
install.packages('usethis')
install.packages('gitcreds')
library(usethis)
library(gitcreds)
use_git_config(user.name = "jenni-shearston",)
use_git_config(user.name = "jenni-shearston", user.email = "jenni.shearston@gmail.com")
usethis::create_github_token()
gitcreds::gitcreds_set()
